// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  VENDOR
}

model User {
  id                       String      @id @default(auto()) @map("_id") @db.ObjectId
  name                     String?
  email                    String?     @unique
  emailVerified            Boolean     @default(false)
  emailVerifiedDate        DateTime?
  verificationRequestCount Int?
  verificationToken        String?
  forgetPasswordToken      String?
  password                 String?
  role                     Role        @default(USER)
  status                   String?
  completed                String?
  description              String?
  industry                 String?
  brandName                String?
  country                  String?
  city                     String?
  state                    String?
  zip                      String?
  phoneNumber              String?
  website                  String?
  image                    String?
  address                  String?
  proveOfAddre             String?
  businessReg              String?
  idCard                   String?
  taxReg                   String?
  adminVerified            Boolean     @default(false)
  jobs                     Jobs[]
  blogs                    Blogs[]
  applicant                Applicant[]
  comment                  Comment[]
  terms                    Terms[]
  interviewed              Interview[]
}

// model User {
//   id                       Int      @id @default(au)
//   name                     String?
//   email                    String?     @unique
//   emailVerified            Boolean     @default(false)
//   emailVerifiedDate        DateTime?
//   verificationRequestCount Int?
//   verificationToken        String?
//   forgetPasswordToken      String?
//   password                 String?
//   role                     Role        @default(USER)
//   status                   String?
//   completed                String?
//   description              String?
//   industry                 String?
//   brandName                String?
//   country                  String?
//   city                     String?
//   state                    String?
//   zip                      String?
//   phoneNumber              String?
//   website                  String?
//   image                    String?
//   address                  String?
//   proveOfAddre             String?
//   businessReg              String?
//   idCard                   String?
//   taxReg                   String?
//   adminVerified            Boolean     @default(false)
//   jobs                     Jobs[]
//   blogs                    Blogs[]
//   applicant                Applicant[]
//   comment                  Comment[]
//   terms                    Terms[]
// }

model Jobs {
  id               String      @id @default(auto()) @map("_id") @db.ObjectId
  brandName        String
  title            String
  Description      String
  industry         String
  jobType          String
  payFrom          Int
  payTo            Int
  status           String
  interview        String?     @default("pending")
  applicant        Applicant[]
  interviewed      Interview[]
  location         String
  experienceLevels String
  jobCategories    String
  coverImage       String
  webUrl           String
  createdAt        DateTime?   @default(now())
  updatedAt        DateTime?   @updatedAt
  userId           String      @db.ObjectId
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Blogs {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  description String?
  coverImage  String?
  author      String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment     Comment[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  blogId    String    @db.ObjectId
  blog      Blogs     @relation(fields: [blogId], references: [id], onDelete: Cascade)
}

model Applicant {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  resume      String?
  coverLetter String?
  status      String?
  name        String?
  email       String?
  linkedin    String?
  role        String?
  interview   String?
  portfolio   String?
  video       String?
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @updatedAt
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId       String      @db.ObjectId
  job         Jobs        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  Interview   Interview[]
  Exam        Exam[]
}

model Interview {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  date          String?
  time          String?
  name          String?
  email         String?
  role          String?
  result        String?
  status        String?
  interviewType String?
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
  userId        String    @db.ObjectId
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId         String    @db.ObjectId
  job           Jobs      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  applicantId   String    @db.ObjectId
  applicant     Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}

model Terms {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Newsletter {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Exam {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  steps       Json[]
  applicantId String    @db.ObjectId
  applicant   Applicant @relation(fields: [applicantId], references: [id], onDelete: Cascade)
}
